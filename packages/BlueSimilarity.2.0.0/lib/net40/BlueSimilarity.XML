<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlueSimilarity</name>
    </assembly>
    <members>
        <member name="T:BlueSimilarity.Containers.FileTokenizer">
            <summary>
                Iterate over the tokens in the file e.g. txt
            implements <seealso cref="T:System.IDisposable"/>
            </summary>
        </member>
        <member name="T:BlueSimilarity.Containers.ITokenizer">
            <summary>
            Defines the iterator over the tokens by splitting string
            </summary>
        </member>
        <member name="M:BlueSimilarity.Containers.FileTokenizer.#ctor(System.IO.FileInfo)">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.Containers.FileTokenizer"/> class.
            </summary>
            <param name="fileInfo">The file.</param>
        </member>
        <member name="T:BlueSimilarity.Containers.StandardTokenizer">
            <summary>
            Standard tokenizer
            </summary>
        </member>
        <member name="T:BlueSimilarity.Containers.Tokenizer">
            <summary>
                Split the free text in tokens
            </summary>
        </member>
        <member name="M:BlueSimilarity.Containers.Tokenizer.#ctor(System.String)">
            <summary>
                Constructs a <see cref="T:BlueSimilarity.Containers.Tokenizer"/> on the specified string, using the default delimiter set
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:BlueSimilarity.Containers.Tokenizer.#ctor(BlueSimilarity.Types.NormalizedString)">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.Containers.Tokenizer"/> class.
            </summary>
            <param name="normalizedText">The normalized text.</param>
        </member>
        <member name="M:BlueSimilarity.Containers.Tokenizer.#ctor(System.String,System.Char[])">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.Containers.Tokenizer"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="delimiters">The delimiters.</param>
        </member>
        <member name="M:BlueSimilarity.Containers.Tokenizer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:BlueSimilarity.Containers.Tokenizer.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:BlueSimilarity.Containers.Tokenizer.MoveNext">
            <summary>
                Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
                true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the
                end of the collection.
            </returns>
        </member>
        <member name="M:BlueSimilarity.Containers.Tokenizer.Reset">
            <summary>
                Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:BlueSimilarity.Containers.Tokenizer.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the
                collection.
            </returns>
        </member>
        <member name="P:BlueSimilarity.Containers.Tokenizer.System#Collections#IEnumerator#Current">
            <summary>
                Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:BlueSimilarity.Containers.Tokenizer.Current">
            <summary>
                Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The current.</value>
        </member>
        <member name="M:BlueSimilarity.Containers.StandardTokenizer.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:BlueSimilarity.Containers.Tokenizer"/> on the specified string, using the default delimiter set
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="T:BlueSimilarity.BagOfWordsSimilarity">
            <summary>
                The similarity between more tokens (words)
            </summary>
        </member>
        <member name="T:BlueSimilarity.Definitions.IBagOfWordsSimilarity">
            <summary>
            Defines similarity between more tokens
            </summary>
        </member>
        <member name="M:BlueSimilarity.Definitions.IBagOfWordsSimilarity.GetSimilarity(System.String[],System.String[])">
            <summary>
            Gets the similarity between array of tokens. The position of token in array
            doesn't have an impact on resulting score.
            </summary>
            <param name="tokensPattern">The tokens pattern</param>
            <param name="tokensTarget">The tokens target.</param>
            <returns>the score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.Definitions.IBagOfWordsSimilarity.GetSimilarity(BlueSimilarity.Types.NormalizedString[],BlueSimilarity.Types.NormalizedString[])">
            <summary>
            Gets the similarity between array of tokens. The position of token in array
            doesn't have an impact on resulting score.
            </summary>
            <param name="tokensPattern">The tokens pattern.</param>
            <param name="tokensTarget">The tokens target.</param>
            <returns>the score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.Definitions.IBagOfWordsSimilarity.GetSimilarity(BlueSimilarity.Containers.ITokenizer,BlueSimilarity.Containers.ITokenizer)">
            <summary>
            Gets the similarity between array of tokens. The position of token in array
            doesn't have an impact on resulting score.
            </summary>
            <param name="tokensPattern">The tokens pattern.</param>
            <param name="tokensTarget">The tokens target.</param>
            <returns>the score between 0 and 1</returns>
        </member>
        <member name="P:BlueSimilarity.Definitions.IBagOfWordsSimilarity.InternalTokenSimilarity">
            <summary>
            Gets the internal token similarity between tokens.
            </summary>
            <value>The internal token similarity.</value>
        </member>
        <member name="P:BlueSimilarity.Definitions.IBagOfWordsSimilarity.IsSymmetric">
            <summary>
            Indicates whether the bag of tokens similarity is symmetric. The symmetric similarity
            doesn't matter if the tokens passes in argument tokensPattern or tokensTarget. This satisfies
            metric symmetry axiom sim(x, y) = sim(y, x). Otherwise if is not symmetric then the tokensPattern will be matched
            as pattern.
            </summary>
            <value><c>true</c> if this instance is symmetric; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:BlueSimilarity.BagOfWordsSimilarity.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.BagOfWordsSimilarity"/> class
            with default values <seealso cref="F:BlueSimilarity.Definitions.TokenSimilarity.Levenshtein"/> and <seealso cref="P:BlueSimilarity.BagOfWordsSimilarity.IsSymmetric"/>
            false.
            </summary>
        </member>
        <member name="M:BlueSimilarity.BagOfWordsSimilarity.#ctor(BlueSimilarity.Definitions.TokenSimilarity)">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.BagOfWordsSimilarity"/> class
            ith default value <seealso cref="P:BlueSimilarity.BagOfWordsSimilarity.IsSymmetric"/> false.
            </summary>
            <param name="tokenSimilarity">The token similarity.</param>
        </member>
        <member name="M:BlueSimilarity.BagOfWordsSimilarity.#ctor(BlueSimilarity.Definitions.TokenSimilarity,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.BagOfWordsSimilarity"/> class.
            </summary>
            <param name="tokenSimilarity">The token similarity.</param>
            <param name="isSymmetric">if set to <c>true</c> [is symmetric].</param>
        </member>
        <member name="M:BlueSimilarity.BagOfWordsSimilarity.GetSimilarity(System.String[],System.String[])">
            <summary>
                Gets the similarity.
            </summary>
            <param name="tokensPattern">The tokens pattern.</param>
            <param name="tokensTarget">The tokens target.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:BlueSimilarity.BagOfWordsSimilarity.GetSimilarity(BlueSimilarity.Types.NormalizedString[],BlueSimilarity.Types.NormalizedString[])">
            <summary>
                Gets the similarity between array of tokens. The position of token in array
                doesn't have an impact on resulting score.
            </summary>
            <param name="tokensPattern">The tokens pattern.</param>
            <param name="tokensTarget">The tokens target.</param>
            <returns>the score between 0 and 1</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:BlueSimilarity.BagOfWordsSimilarity.GetSimilarity(BlueSimilarity.Containers.ITokenizer,BlueSimilarity.Containers.ITokenizer)">
            <summary>
                Gets the similarity between array of tokens. The position of token in array
                doesn't have an impact on resulting score.
            </summary>
            <param name="tokensPattern">The tokens pattern.</param>
            <param name="tokensTarget">The tokens target.</param>
            <returns>the score between 0 and 1</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:BlueSimilarity.BagOfWordsSimilarity.IsSymmetric">
            <summary>
                Indicates whether the bag of tokens similarity is symmetric. The symmetric similarity
                doesn't matter if the tokens passes in argument tokensPattern or tokensTarget. This satisfies
                metric symmetry axiom sim(x, y) = sim(y, x). Otherwise if is not symmetric then the tokensPattern will be matched
                as pattern.
            </summary>
            <value><c>true</c> if this instance is symmetric; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlueSimilarity.BagOfWordsSimilarity.InternalTokenSimilarity">
            <summary>
                Gets the internal token similarity between tokens.
            </summary>
            <value>The internal token similarity.</value>
        </member>
        <member name="T:BlueSimilarity.Definitions.ISemantic">
            <summary>
            The similarity metric supports semantic behaviour
            </summary>
        </member>
        <member name="P:BlueSimilarity.Definitions.ISemantic.Vocabulary">
            <summary>
            Gets the vocabulary.
            </summary>
            <value>The vocabulary.</value>
        </member>
        <member name="T:BlueSimilarity.Definitions.TokenSimilarity">
            <summary>
            Select the internal similarity between tokens (words)
            </summary>
        </member>
        <member name="F:BlueSimilarity.Definitions.TokenSimilarity.Levenshtein">
            <summary>
            Levenshtein similarity
            </summary>
        </member>
        <member name="F:BlueSimilarity.Definitions.TokenSimilarity.DamerauLevenshtein">
            <summary>
            Damerau-Levenshtein similarity
            </summary>
        </member>
        <member name="F:BlueSimilarity.Definitions.TokenSimilarity.Jaro">
            <summary>
            Jaro similarity
            </summary>
        </member>
        <member name="F:BlueSimilarity.Definitions.TokenSimilarity.JaroWinkler">
            <summary>
            Jaro-Winkler similarity
            </summary>
        </member>
        <member name="F:BlueSimilarity.Definitions.TokenSimilarity.DiceCoefficient">
            <summary>
            Dice coefficient based on Q-grams
            </summary>
        </member>
        <member name="F:BlueSimilarity.Definitions.TokenSimilarity.JaccardCoefficient">
            <summary>
            Jaccard coefficient based on Q-grams
            </summary>
        </member>
        <member name="F:BlueSimilarity.Definitions.TokenSimilarity.OverlapCoefficient">
            <summary>
            Overlap coefficient based on Q-grams
            </summary>
        </member>
        <member name="F:BlueSimilarity.Definitions.TokenSimilarity.Exact">
            <summary>
            Token must be same
            </summary>
        </member>
        <member name="T:BlueSimilarity.Indexing.SemanticVocabulary">
            <summary>
                Learn the semantic vocabulary for semantic similarity metric
                from some sources which can represents
            </summary>
        </member>
        <member name="F:BlueSimilarity.Indexing.SemanticVocabulary._learnedVocabulary">
            <summary>
                Learned vocabulary of unique words
            </summary>
        </member>
        <member name="M:BlueSimilarity.Indexing.SemanticVocabulary.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.Indexing.SemanticVocabulary"/> class.
            </summary>
        </member>
        <member name="M:BlueSimilarity.Indexing.SemanticVocabulary.GetSemanticWeight(System.String)">
            <summary>
                Gets the semantic weight of the word
            </summary>
            <param name="word">The word.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:BlueSimilarity.Indexing.SemanticVocabulary.AddSource(BlueSimilarity.Containers.ITokenizer)">
            <summary>
                Adds the source for learning vocabulary
            </summary>
            <param name="tokenizer">The standard tokenizer.</param>
        </member>
        <member name="M:BlueSimilarity.Indexing.SemanticVocabulary.SaveToFile(System.String)">
            <summary>
            Save the vocabulary in the file in serialized and compressed form.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:BlueSimilarity.Indexing.SemanticVocabulary.LoadFromFile(System.String)">
            <summary>
            Load vocabulary from file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="P:BlueSimilarity.Indexing.SemanticVocabulary.TotalWords">
            <summary>
                Gets the total words in vocabulary.
            </summary>
            <value>The total words.</value>
        </member>
        <member name="P:BlueSimilarity.Indexing.SemanticVocabulary.UniqueWords">
            <summary>
                Gets the unique words.
            </summary>
            <value>The unique words.</value>
        </member>
        <member name="T:BlueSimilarity.SemanticBagOfWordsSimilarity">
            <summary>
            The semantic similarity between more words. Important for semantic functionality is to have well learned <seealso cref="T:BlueSimilarity.Indexing.SemanticVocabulary"/>
            </summary>
        </member>
        <member name="M:BlueSimilarity.SemanticBagOfWordsSimilarity.GetSimilarity(System.String[],System.String[])">
            <summary>
            Gets the semantic similarity between array of tokens. The position of token in array
            doesn't have an impact on resulting score.
            </summary>
            <param name="tokensPattern">The tokens pattern</param>
            <param name="tokensTarget">The tokens target.</param>
            <returns>the score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.SemanticBagOfWordsSimilarity.GetSimilarity(BlueSimilarity.Types.NormalizedString[],BlueSimilarity.Types.NormalizedString[])">
            <summary>
            Gets the similarity between array of tokens. The position of token in array
            doesn't have an impact on resulting score.
            </summary>
            <param name="tokensPattern">The tokens pattern.</param>
            <param name="tokensTarget">The tokens target.</param>
            <returns>The score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.SemanticBagOfWordsSimilarity.GetSimilarity(BlueSimilarity.Containers.ITokenizer,BlueSimilarity.Containers.ITokenizer)">
            <summary>
            Gets the similarity between array of tokens. The position of the token in array
            doesn't have an impact on resulting score.
            </summary>
            <param name="tokensPattern">The tokens pattern.</param>
            <param name="tokensTarget">The tokens target.</param>
            <returns>The score between 0 and 1</returns>
        </member>
        <member name="P:BlueSimilarity.SemanticBagOfWordsSimilarity.Vocabulary">
            <summary>
            Gets the vocabulary.
            </summary>
            <value>The vocabulary.</value>
        </member>
        <member name="T:BlueSimilarity.SoftTFIDF">
            <summary>
            SoftTFIDF
            </summary>
        </member>
        <member name="M:BlueSimilarity.SoftTFIDF.#ctor(BlueSimilarity.Indexing.SemanticVocabulary)">
            <summary>
            Initializes a new instance of the <see cref="T:BlueSimilarity.SoftTFIDF"/> class.
            </summary>
            <param name="learnedVocabulary">The learned vocabulary.</param>
        </member>
        <member name="M:BlueSimilarity.SoftTFIDF.#ctor(BlueSimilarity.Indexing.SemanticVocabulary,BlueSimilarity.Definitions.TokenSimilarity)">
            <summary>
            Initializes a new instance of the <see cref="T:BlueSimilarity.SoftTFIDF"/> class.
            </summary>
            <param name="learnedVocabulary">The learned vocabulary.</param>
            <param name="tokenSimilarity">The token similarity.</param>
        </member>
        <member name="M:BlueSimilarity.SoftTFIDF.GetSimilarity(System.String[],System.String[])">
            <summary>
            Gets the similarity.
            </summary>
            <param name="patternTokens">The pattern tokens.</param>
            <param name="targetTokens">The target tokens.</param>
            <returns></returns>
        </member>
        <member name="M:BlueSimilarity.SoftTFIDF.GetSimilarity(BlueSimilarity.Types.NormalizedString[],BlueSimilarity.Types.NormalizedString[])">
            <summary>
            Gets the similarity between array of tokens. The position of token in array
            doesn't have an impact on resulting score.
            </summary>
            <param name="tokensPattern">The tokens pattern.</param>
            <param name="tokensTarget">The tokens target.</param>
            <returns>
            the score between 0 and 1
            </returns>
        </member>
        <member name="M:BlueSimilarity.SoftTFIDF.GetSimilarity(BlueSimilarity.Containers.ITokenizer,BlueSimilarity.Containers.ITokenizer)">
            <summary>
            Gets the similarity between array of tokens. The position of token in array
            doesn't have an impact on resulting score.
            </summary>
            <param name="tokensPattern">The tokens pattern.</param>
            <param name="tokensTarget">The tokens target.</param>
            <returns>
            the score between 0 and 1
            </returns>
        </member>
        <member name="P:BlueSimilarity.SoftTFIDF.InternalTokenSimilarity">
            <summary>
            Gets the internal token similarity between tokens.
            </summary>
            <value>
            The internal token similarity.
            </value>
        </member>
        <member name="P:BlueSimilarity.SoftTFIDF.Vocabulary">
            <summary>
            Gets the vocabulary.
            </summary>
            <value>
            The vocabulary.
            </value>
        </member>
        <member name="T:BlueSimilarity.TFIDF">
            <summary>
                TF-IDF
            </summary>
        </member>
        <member name="M:BlueSimilarity.TFIDF.#ctor(BlueSimilarity.Indexing.SemanticVocabulary)">
            <summary>
            Initializate 
            </summary>
            <param name="semanticVocabulary">The semantic vocabulary.</param>
        </member>
        <member name="M:BlueSimilarity.TFIDF.GetSimilarity(System.String[],System.String[])">
            <summary>
            Gets the similarity between array of tokens. The position of token in array
            doesn't have an impact on resulting score.
            </summary>
            <param name="tokensPattern">The tokens pattern</param>
            <param name="tokensTarget">The tokens target.</param>
            <returns>
            the score between 0 and 1
            </returns>
        </member>
        <member name="M:BlueSimilarity.TFIDF.GetSimilarity(BlueSimilarity.Types.NormalizedString[],BlueSimilarity.Types.NormalizedString[])">
            <summary>
            Gets the similarity between array of tokens. The position of token in array
            doesn't have an impact on resulting score.
            </summary>
            <param name="tokensPattern">The tokens pattern.</param>
            <param name="tokensTarget">The tokens target.</param>
            <returns>
            the score between 0 and 1
            </returns>
        </member>
        <member name="M:BlueSimilarity.TFIDF.GetSimilarity(BlueSimilarity.Containers.ITokenizer,BlueSimilarity.Containers.ITokenizer)">
            <summary>
            Gets the similarity.
            </summary>
            <param name="patternTokenizer">The pattern tokenizer.</param>
            <param name="targetTokenizer">The target tokenizer.</param>
            <returns></returns>
        </member>
        <member name="P:BlueSimilarity.TFIDF.InternalTokenSimilarity">
            <summary>
            Gets the internal token similarity between tokens.
            </summary>
            <value>
            The internal token similarity.
            </value>
        </member>
        <member name="P:BlueSimilarity.TFIDF.IsSymmetric">
            <summary>
            Indicates whether the bag of words similarity is symmetric. The symmetric similarity
            doesn't matter if the tokens passes in argument tokensPattern or tokensTarget. This satisfies
            metric symmetry axiom sim(x, y) = sim(y, x). Otherwise if is not symmetric then the tokensPattern will be matched
            as pattern.
            </summary>
            <value>
            <c>true</c> if this instance is symmetric; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BlueSimilarity.TFIDF.Vocabulary">
            <summary>
            Gets the vocabulary.
            </summary>
            <value>
            The vocabulary.
            </value>
        </member>
        <member name="T:BlueSimilarity.Types.Bigram">
            <summary>
                Q-gram with the length of string 2 is called bigram
            </summary>
        </member>
        <member name="T:BlueSimilarity.Types.IQgram">
            <summary>
                Q-gram properties
            </summary>
        </member>
        <member name="P:BlueSimilarity.Types.IQgram.Length">
            <summary>
                Gets the length of q-gram
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:BlueSimilarity.Types.IQgram.Value">
            <summary>
                Gets the value of q-gram
            </summary>
            <value>The value.</value>
        </member>
        <member name="F:BlueSimilarity.Types.Bigram.BigramLength">
            <summary>
                The bigram length
            </summary>
        </member>
        <member name="M:BlueSimilarity.Types.Bigram.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.Types.Bigram"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BlueSimilarity.Types.Bigram.CompareTo(BlueSimilarity.Types.Bigram)">
            <summary>
                Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                A value that indicates the relative order of the objects being compared. The return value has the following
                meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This
                object is equal to <paramref name="other" />. Greater than zero This object is greater than
                <paramref name="other" />.
            </returns>
        </member>
        <member name="M:BlueSimilarity.Types.Bigram.Equals(BlueSimilarity.Types.Bigram)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:BlueSimilarity.Types.Bigram.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BlueSimilarity.Types.Bigram.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:BlueSimilarity.Types.Bigram.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:BlueSimilarity.Types.Bigram.Length">
            <summary>
                Gets the length of q-gram
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:BlueSimilarity.Types.Bigram.Value">
            <summary>
                Gets the value of q-gram
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:BlueSimilarity.Containers.ISetOperations`1.Intersect(`0)">
            <summary>
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:BlueSimilarity.Containers.ISetOperations`1.Union(`0)">
            <summary>
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:BlueSimilarity.Types.TypeConversion.GetQgramLength``1">
            <summary>
                Get Length of the q-gram
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:BlueSimilarity.Types.Unigram">
            <summary>
                Q-gram with the length of string 1 is called unigram
            </summary>
        </member>
        <member name="F:BlueSimilarity.Types.Unigram.UnigramLength">
            <summary>
                The unigram length
            </summary>
        </member>
        <member name="M:BlueSimilarity.Types.Unigram.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.Types.Unigram"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BlueSimilarity.Types.Unigram.CompareTo(BlueSimilarity.Types.Unigram)">
            <summary>
                Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                A value that indicates the relative order of the objects being compared. The return value has the following
                meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This
                object is equal to <paramref name="other" />. Greater than zero This object is greater than
                <paramref name="other" />.
            </returns>
        </member>
        <member name="M:BlueSimilarity.Types.Unigram.Equals(BlueSimilarity.Types.Unigram)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:BlueSimilarity.Types.Unigram.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BlueSimilarity.Types.Unigram.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:BlueSimilarity.Types.Unigram.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:BlueSimilarity.Types.Unigram.Length">
            <summary>
                Gets the length of q-gram
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:BlueSimilarity.Types.Unigram.Value">
            <summary>
                Gets the value of q-gram
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:BlueSimilarity.Types.Trigram">
            <summary>
                Q-gram with the length of string 2 is called bigram
            </summary>
        </member>
        <member name="F:BlueSimilarity.Types.Trigram.TrigramLength">
            <summary>
                The trigram length
            </summary>
        </member>
        <member name="M:BlueSimilarity.Types.Trigram.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.Types.Trigram"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BlueSimilarity.Types.Trigram.CompareTo(BlueSimilarity.Types.Trigram)">
            <summary>
                Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                A value that indicates the relative order of the objects being compared. The return value has the following
                meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This
                object is equal to <paramref name="other" />. Greater than zero This object is greater than
                <paramref name="other" />.
            </returns>
        </member>
        <member name="M:BlueSimilarity.Types.Trigram.Equals(BlueSimilarity.Types.Trigram)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:BlueSimilarity.Types.Trigram.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BlueSimilarity.Types.Trigram.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:BlueSimilarity.Types.Trigram.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:BlueSimilarity.Types.Trigram.Length">
            <summary>
                Gets the length of q-gram
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:BlueSimilarity.Types.Trigram.Value">
            <summary>
                Gets the value of q-gram
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:BlueSimilarity.Definitions.IDistance">
            <summary>
                Edit distance is a way of quantifying how dissimilar two strings (e.g., words) are to one another by counting the
                minimum number of operations required to transform one string into the other.
            </summary>
        </member>
        <member name="M:BlueSimilarity.Definitions.IDistance.GetDistance(System.String,System.String)">
            <summary>
                Count edit distance
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>The minimum number of operations required to transform one string into the other.</returns>
        </member>
        <member name="M:BlueSimilarity.Definitions.IDistance.GetDistance(BlueSimilarity.Types.NormalizedString,BlueSimilarity.Types.NormalizedString)">
            <summary>
                Count edit distance
            </summary>
            <param name="first">first <see cref="T:BlueSimilarity.Types.NormalizedString"/></param>
            <param name="second">second <see cref="T:BlueSimilarity.Types.NormalizedString"/></param>
            <returns>The minimum number of operations required to transform one string into the other.</returns>
        </member>
        <member name="M:BlueSimilarity.Definitions.IDistance.GetDistance(BlueSimilarity.Types.Token,BlueSimilarity.Types.Token)">
            <summary>
                Count edit distance
            </summary>
            <param name="first">first <see cref="T:BlueSimilarity.Types.Token"/></param>
            <param name="second">second <see cref="T:BlueSimilarity.Types.Token"/></param>
            <returns>The minimum number of operations required to transform one string into the other.</returns>
        </member>
        <member name="T:BlueSimilarity.Definitions.ISimilarity">
            <summary>
                Methods for measurement similarity between 0 and 1 where 0 is total dissimilarity
                and 1 are full similar strings with regards to used algorithm
            </summary>
        </member>
        <member name="M:BlueSimilarity.Definitions.ISimilarity.GetSimilarity(System.String,System.String)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.Definitions.ISimilarity.GetSimilarity(BlueSimilarity.Types.NormalizedString,BlueSimilarity.Types.NormalizedString)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.Definitions.ISimilarity.GetSimilarity(BlueSimilarity.Types.Token,BlueSimilarity.Types.Token)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="T:BlueSimilarity.DamerauLevenshtein">
            <summary>
                Damerau - Levenshtein algorithm providing similarity measurement <see cref="T:BlueSimilarity.Definitions.ISimilarity"/>
                and distance measurement <see cref="T:BlueSimilarity.Definitions.IDistance"/> see description:
                http://en.wikipedia.org/wiki/Damerau–Levenshtein_distance
            </summary>
        </member>
        <member name="M:BlueSimilarity.DamerauLevenshtein.GetDistance(System.String,System.String)">
            <summary>
                Offers the same behavior as <see cref="M:BlueSimilarity.Levenshtein.GetDistance(System.String,System.String)"/>
                and extends for transposition of two character that will have only 1 distance
            </summary>
            <example>
                return 1 for transposition two character ABC =&gt; ACB
            </example>
            <param name="first">the first string</param>
            <param name="second">the second string</param>
            <returns>return the number of edit distance</returns>
        </member>
        <member name="M:BlueSimilarity.DamerauLevenshtein.GetDistance(BlueSimilarity.Types.NormalizedString,BlueSimilarity.Types.NormalizedString)">
            <summary>
                Offers the same behavior as <see cref="M:BlueSimilarity.Levenshtein.GetDistance(BlueSimilarity.Types.NormalizedString,BlueSimilarity.Types.NormalizedString)"/>
                and extends for transposition of two character that will have only 1 distance
            </summary>
            <example>
                return 1 for transposition two character ABC =&gt; ACB
            </example>
            <param name="first">the first normalized string</param>
            <param name="second">the second normalized string</param>
            <returns>return the number of edit distance</returns>
        </member>
        <member name="M:BlueSimilarity.DamerauLevenshtein.GetDistance(BlueSimilarity.Types.Token,BlueSimilarity.Types.Token)">
            <summary>
                Offers the same behavior as <see cref="M:BlueSimilarity.Levenshtein.GetDistance(BlueSimilarity.Types.Token,BlueSimilarity.Types.Token)"/>
                and extends for transposition of two character that will have only 1 distance
            </summary>
            <example>
                return 1 for transposition two character ABC =&gt; ACB
            </example>
            <param name="first">the first normalized string</param>
            <param name="second">the second normalized string</param>
            <returns>return the number of edit distance</returns>
        </member>
        <member name="M:BlueSimilarity.DamerauLevenshtein.GetSimilarity(BlueSimilarity.Types.Token,BlueSimilarity.Types.Token)">
            <summary>
                Get the similarity score
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.DamerauLevenshtein.GetSimilarity(System.String,System.String)">
            <summary>
                Get the similarity score
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.DamerauLevenshtein.GetSimilarity(BlueSimilarity.Types.NormalizedString,BlueSimilarity.Types.NormalizedString)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="F:BlueSimilarity.Definitions.NativeEntryPoint.BlueSimilarityInteropName">
            <summary>
                The name of the interop native assembly name
            </summary>
        </member>
        <member name="F:BlueSimilarity.Definitions.NativeEntryPoint.InteropCallingConvention">
            <summary>
                Calling convention to the native entry point
            </summary>
        </member>
        <member name="M:BlueSimilarity.Definitions.NativeEntryPoint.LoadLibraryIfExists(System.String)">
            <summary>
                Load the native library
                <example>
                    e.g. unmanaged.dll
                </example>
            </summary>
            <param name="dllName">the file name for native dll library</param>
        </member>
        <member name="T:BlueSimilarity.DiceCoefficient`1">
            <summary>
                Dice coefficient see description: http://en.wikipedia.org/wiki/Sørensen–Dice_coefficient
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BlueSimilarity.DiceCoefficient`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.DiceCoefficient`1"/> class.
            </summary>
        </member>
        <member name="M:BlueSimilarity.DiceCoefficient`1.GetSimilarity(BlueSimilarity.Types.Token,BlueSimilarity.Types.Token)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.DiceCoefficient`1.GetSimilarity(System.String,System.String)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.DiceCoefficient`1.GetSimilarity(BlueSimilarity.Types.NormalizedString,BlueSimilarity.Types.NormalizedString)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="T:BlueSimilarity.JaccardCoefficient`1">
            <summary>
                Jaccard coefficient see description: http://en.wikipedia.org/wiki/Jaccard_coefficient
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BlueSimilarity.JaccardCoefficient`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.JaccardCoefficient`1"/> class.
            </summary>
        </member>
        <member name="M:BlueSimilarity.JaccardCoefficient`1.GetSimilarity(BlueSimilarity.Types.Token,BlueSimilarity.Types.Token)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.JaccardCoefficient`1.GetSimilarity(System.String,System.String)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.JaccardCoefficient`1.GetSimilarity(BlueSimilarity.Types.NormalizedString,BlueSimilarity.Types.NormalizedString)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="T:BlueSimilarity.Jaro">
            <summary>
                Jaro distance see description: http://en.wikipedia.org/wiki/Jaro–Winkler_distance
            </summary>
        </member>
        <member name="M:BlueSimilarity.Jaro.GetSimilarity(System.String,System.String)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.Jaro.GetSimilarity(BlueSimilarity.Types.NormalizedString,BlueSimilarity.Types.NormalizedString)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.Jaro.GetSimilarity(BlueSimilarity.Types.Token,BlueSimilarity.Types.Token)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="T:BlueSimilarity.JaroWinkler">
            <summary>
                Jaro-Winkler method	see description: http://en.wikipedia.org/wiki/Jaro–Winkler_distance
            </summary>
        </member>
        <member name="M:BlueSimilarity.JaroWinkler.GetSimilarity(BlueSimilarity.Types.Token,BlueSimilarity.Types.Token)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.JaroWinkler.GetSimilarity(System.String,System.String)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.JaroWinkler.GetSimilarity(BlueSimilarity.Types.NormalizedString,BlueSimilarity.Types.NormalizedString)">
            <summary>
                Get the normalized similarity score from 0 to 1 where 1 is total similarity
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="T:BlueSimilarity.Levenshtein">
            <summary>
                Levenshtein algorithm providing similarity
                measurement <see cref="T:BlueSimilarity.Definitions.ISimilarity"/> and distance measurement <see cref="T:BlueSimilarity.Definitions.IDistance"/>
                see description: http://en.wikipedia.org/wiki/Levenshtein_distance
            </summary>
        </member>
        <member name="M:BlueSimilarity.Levenshtein.GetDistance(BlueSimilarity.Types.Token,BlueSimilarity.Types.Token)">
            <summary>
                <see cref="M:BlueSimilarity.Levenshtein.GetDistance(System.String,System.String)"/>
            </summary>
            <param name="first">the first token</param>
            <param name="second">the second token</param>
            <returns>returns the number of edit distance</returns>
        </member>
        <member name="M:BlueSimilarity.Levenshtein.GetDistance(BlueSimilarity.Types.NormalizedString,BlueSimilarity.Types.NormalizedString)">
            <summary>
                <see cref="M:BlueSimilarity.Levenshtein.GetDistance(System.String,System.String)"/>
            </summary>
            <param name="first">the first normalized string</param>
            <param name="second">the second normalized string</param>
            <returns>returns the number of edit distance</returns>
        </member>
        <member name="M:BlueSimilarity.Levenshtein.GetDistance(System.String,System.String)">
            <summary>
                Levenshtein distance returns the number of edit operations
                (addition, deletation, substitution) which are needed for transformation
                from one string to another
                <example>
                    return 1 for deletation character: ABC => AC
                    return 1 for substitution character ABC => AXC
                    return 1 for addition character ABC => ABCD
                </example>
            </summary>
            <param name="first">the first string</param>
            <param name="second">the second string</param>
            <returns>returns the number of edit distance</returns>
        </member>
        <member name="M:BlueSimilarity.Levenshtein.GetSimilarity(BlueSimilarity.Types.Token,BlueSimilarity.Types.Token)">
            <summary>
                Normalized similarity from 0 to 1 where the 1 is total similarity
            </summary>
            <param name="first">the first token</param>
            <param name="second">the second token</param>
            <returns>returns the number of edit distance</returns>
        </member>
        <member name="M:BlueSimilarity.Levenshtein.GetSimilarity(System.String,System.String)">
            <summary>
                Normalized similarity from 0 to 1 where the 1 is total similarity
            </summary>
            <param name="first">the first token</param>
            <param name="second">the second token</param>
            <returns>returns the number of edit distance</returns>
        </member>
        <member name="M:BlueSimilarity.Levenshtein.GetSimilarity(BlueSimilarity.Types.NormalizedString,BlueSimilarity.Types.NormalizedString)">
            <summary>
                Normalized similarity from 0 to 1 where the 1 is total similarity
            </summary>
            <param name="first">the first normalized string</param>
            <param name="second">the second normalized string</param>
            <returns>returns the number of edit distance</returns>
        </member>
        <member name="T:BlueSimilarity.OverlapCoefficient`1">
            <summary>
                Overlap coefficient see description: http://en.wikipedia.org/wiki/Overlap_coefficient
            </summary>
            <typeparam name="T"><see cref="T:BlueSimilarity.Types.Unigram"/>, <see cref="T:BlueSimilarity.Types.Bigram"/>, <see cref="T:BlueSimilarity.Types.Trigram"/></typeparam>
        </member>
        <member name="M:BlueSimilarity.OverlapCoefficient`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.OverlapCoefficient`1"/> class.
            </summary>
        </member>
        <member name="M:BlueSimilarity.OverlapCoefficient`1.GetSimilarity(BlueSimilarity.Types.Token,BlueSimilarity.Types.Token)">
            <summary>
                Get the similarity score
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.OverlapCoefficient`1.GetSimilarity(System.String,System.String)">
            <summary>
                Get the similarity score
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="M:BlueSimilarity.OverlapCoefficient`1.GetSimilarity(BlueSimilarity.Types.NormalizedString,BlueSimilarity.Types.NormalizedString)">
            <summary>
                Get the similarity score
            </summary>
            <param name="first">first string</param>
            <param name="second">second string</param>
            <returns>returns the similarity score between 0 and 1</returns>
        </member>
        <member name="T:BlueSimilarity.Containers.IQGramSet`1">
            <summary>
                Defines operations and properties, which are needed
                for working Q-grams set
            </summary>
        </member>
        <member name="P:BlueSimilarity.Containers.IQGramSet`1.QGramLength">
            <summary>
                Q-gram order
            </summary>
        </member>
        <member name="T:BlueSimilarity.Types.NormalizedString">
            <summary>
                Normalized the textual string to invariant comparable form
                remove diacritics, special symbols and upper case the text
            </summary>
        </member>
        <member name="M:BlueSimilarity.Types.NormalizedString.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.Types.NormalizedString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BlueSimilarity.Types.NormalizedString.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:BlueSimilarity.Types.NormalizedString.ConvertToCanonicalForm(System.String)">
            <summary>
            Append lower case, upper case and numbers
            </summary>
            <param name="unicodeString"></param>
            <returns></returns>
        </member>
        <member name="P:BlueSimilarity.Types.NormalizedString.Value">
            <summary>
                Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:BlueSimilarity.Containers.QGramSet`1">
            <summary>
                Creates Q-gram stream from ordered
                sequence (contextual) tokens
            </summary>
        </member>
        <member name="F:BlueSimilarity.Containers.QGramSet`1.BlankSpace">
            <summary>
                Default blank space symbol
            </summary>
        </member>
        <member name="F:BlueSimilarity.Containers.QGramSet`1._qGramsDictionary">
            <summary>
                internally storage for all q-grams
            </summary>
        </member>
        <member name="M:BlueSimilarity.Containers.QGramSet`1.#ctor(System.String)">
            <summary>
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:BlueSimilarity.Containers.QGramSet`1.#ctor(BlueSimilarity.Types.NormalizedString)">
            <summary>
            </summary>
            <param name="normalizedString"></param>
        </member>
        <member name="M:BlueSimilarity.Containers.QGramSet`1.#ctor(BlueSimilarity.Containers.IQGramSet{`0})">
            <summary>
            </summary>
            <param name="qGramDictionary"></param>
        </member>
        <member name="M:BlueSimilarity.Containers.QGramSet`1.QGramStreaming(System.String,System.Int32)">
            <summary>
                Creates the stream of q-grams from ordered
                sequence of tokens
            </summary>
            <param name="token"> ordered sequence of tokens </param>
            <param name="qgramLength">q-gram length</param>
            <returns> </returns>
        </member>
        <member name="T:BlueSimilarity.Types.Token">
            <summary>
                Token represents atomic string for measurement similarity
            </summary>
        </member>
        <member name="M:BlueSimilarity.Types.Token.#ctor(System.String)">
            <summary>
                Create token from the string
            </summary>
            <param name="text">the text</param>
        </member>
        <member name="M:BlueSimilarity.Types.Token.#ctor(BlueSimilarity.Types.NormalizedString)">
            <summary>
                Create token from normalized string
            </summary>
            <param name="normalizedString">normalized string</param>
        </member>
        <member name="M:BlueSimilarity.Types.Token.CompareTo(BlueSimilarity.Types.Token)">
            <summary>
                Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                A value that indicates the relative order of the objects being compared. The return value has the following
                meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This
                object is equal to <paramref name="other" />. Greater than zero This object is greater than
                <paramref name="other" />.
            </returns>
        </member>
        <member name="M:BlueSimilarity.Types.Token.Equals(BlueSimilarity.Types.Token)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:BlueSimilarity.Types.Token.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BlueSimilarity.Types.Token.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:BlueSimilarity.Types.Token.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:BlueSimilarity.Types.Token.op_Equality(BlueSimilarity.Types.Token,BlueSimilarity.Types.Token)">
            <summary>
                Equality operator on token
            </summary>
            <param name="left">Left token</param>
            <param name="right">Right token</param>
            <returns>true when equals the tokens otherwise false</returns>
        </member>
        <member name="M:BlueSimilarity.Types.Token.op_Inequality(BlueSimilarity.Types.Token,BlueSimilarity.Types.Token)">
            <summary>
                Non equality operator on token
            </summary>
            <param name="left">Left token</param>
            <param name="right">Right token</param>
            <returns>false when equals the tokens otherwise true</returns>
        </member>
        <member name="P:BlueSimilarity.Types.Token.Value">
            <summary>
                Value of the token
            </summary>
        </member>
        <member name="T:BlueSimilarity.Containers.TokenSet">
            <summary>
                Set of tokens with their occurrences
            </summary>
        </member>
        <member name="M:BlueSimilarity.Containers.TokenSet.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.Containers.TokenSet"/> class.
            </summary>
        </member>
        <member name="M:BlueSimilarity.Containers.TokenSet.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.Containers.TokenSet"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:BlueSimilarity.Containers.TokenSet.#ctor(System.Collections.Generic.IDictionary{BlueSimilarity.Types.Token,System.Int32})">
            <summary>
                Initializes a new instance of the <see cref="T:BlueSimilarity.Containers.TokenSet"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
    </members>
</doc>
